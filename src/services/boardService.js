import { slugify } from "~/utils/formatters";
import { boardModel } from "~/models/boardModel";
import ApiError from "~/utils/ApiError";
import { StatusCodes } from "http-status-codes";
import { cloneDeep } from "lodash";

const createNew = async (reqBody) => {
  // eslint-disable-next-line no-useless-catch
  try {
    //X·ª≠ l√≠ logic d·ªØ li·ªáu
    const newBoard = {
      ...reqBody,
      slug: slugify(reqBody.title),
    };

    //G·ªçi t·ªõi t·∫ßng Model ƒë·ªÉ x·ª≠ l√Ω l∆∞u b·∫£n ghi newBoard v√†o trong Database
    const createdBoard = await boardModel.createNew(newBoard);
    // console.log("üöÄ ~ createNew ~ createdBoard:", createdBoard);

    //L·∫•y b·∫£n ghi board sau khi goi (c·∫ßn ho·∫∑c kh√¥ng)
    const getNewBoard = await boardModel.findOneById(createdBoard.insertedId);
    // console.log("üöÄ ~ createNew ~ getNewBoard:", getNewBoard);

    //L√†m th√™m c√°c x·ª≠ l√Ω logic kh√°c v·ªõi c√°c Collection kh√°c tu·ª≥ ƒë·∫∑c th√π d·ª± √°n...
    //B·∫Øn email, notification v·ªÅ cho admin khi c√≥ 1 board m·ªõi ƒë∆∞·ª£c l·∫≠p

    //Tr·∫£ v·ªÅ k·∫øt qu·∫£, trong Service lu√¥n ph·∫£i c√≥ return
    return getNewBoard;
  } catch (error) {
    throw error;
  }
};

const getDetails = async (boardId) => {
  try {
    const board = await boardModel.getDetails(boardId);
    if (!board) {
      throw new ApiError(StatusCodes.NOT_FOUND, "Board not found!");
    }

    //Clone board ra 1 c√°i m·ªõi ƒë·ªÉ x·ª≠ l√Ω
    const resBoard = cloneDeep(board);
    //ƒê∆∞a card v·ªÅ ƒë√∫ng column c·ªßa n√≥
    resBoard.columns.forEach((column) => {
      column.cards = resBoard.cards.filter(
        (card) => card.columnId.equals(column._id) //equals cua MongoDB
      );

      // column.cards = resBoard.cards.filter(
      //   (card) => card.columnId.toString() === column._id.toString()
      // );
    });
    //Xo√° m·∫£ng cards kh·ªèi board ban ƒë·∫ßu
    delete resBoard.cards;

    return resBoard;
  } catch (error) {
    throw error;
  }
};

export const boardService = {
  createNew,
  getDetails,
};
